# DevSecOps workflow including Application Security Testing with Fortify on Demand (FoD)

name: DevSecOps with Fortify

on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    paths-ignore:
      #      - '.github/workflows/**'
      - 'bin/**'
      - 'data/**'
      - 'etc/**'
      - 'media/**'
      - 'Jenkinsfile'
      - '.gitlab-ci.yml'
      - 'README.md'
      - 'LICENSE'
    branches:
      - '**'        # matches every branch
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      runFoDSASTScan:
        description: 'Carry out SAST scan using Fortify on Demand'
        required: false
        default: 'true'
      runDebrickedScan:
        description: 'Carry out SCA scan using Debricked'
        required: false
        default: 'false'
      runFoDDASTScan:
        description: 'Carry out DAST scan using Fortify on Demand'
        required: false
        default: 'false'

# Global environment variables
env:
  DEFAULT_APP_NAME: "IWA-Web"
  #FCLI_VER: "v1.2.5"
  FCLI_VER: "dev_2.0.0-beta"
  SCANCENTRAL_VER: "22.2.0"

jobs:

  Build-And-Test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Checkout the code
    steps:
      - name: Checkout
        uses: actions/checkout@v3.3.0
        with:
          # Fetch at least the immediate parents so that if this is a pull request then we can checkout the head.
          fetch-depth: 2
      # If this run was triggered by a pull request event, then checkout the head of the pull request instead of the merge commit.
      - run: git checkout HEAD^2
        if: ${{ github.event_name == 'pull_request' }}

      # Setup JDK 11 on host
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'

      # Setup Maven
      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: 3.8.2

      # Build / Test with Maven
      - name: Build with Maven
        run:  mvn -Dmaven.compiler.debuglevel=lines,vars,source -Dskip.unit.tests=false -DfailIfNoTests=false -Dtest="*,!PasswordConstraintValidatorTest,!UserServiceTest,!DefaultControllerTest" -P jar -B clean verify package --file pom.xml

  Debricked-SCA:
    runs-on: ubuntu-latest
    if: ${{ (github.event_name == 'push') || (github.event_name == 'pull_request') || (github.event.inputs.runDebrickedScan == 'true') }}

    steps:
      - uses: actions/checkout@v3.3.0
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'
      - run: |
          mvn dependency:tree \
          -DoutputFile=.debricked-maven-dependencies.tgf \
          -DoutputType=tgf
      - uses: debricked/vulnerable-functionality/java/maven@v0
      - uses: debricked/actions/scan@v1
        env:
          DEBRICKED_TOKEN: ${{ secrets.DEBRICKED_TOKEN }}

  Quality-Gate:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [ Build-And-Test ]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3.3.0

    # TBD

  FoD-SAST-Scan:
    # Use the appropriate runner for building your source code.
    # Use a Windows runner for .NET projects that use msbuild. Additional changes to RUN commands will be required to switch to Windows syntax.
    runs-on: ubuntu-latest
    if: ${{ (github.event_name == 'push') || (github.event_name == 'pull_request') || (github.event.inputs.runFoDSASTScan == 'true') }}

    steps:
      - name: Check Out Source Code
        uses: actions/checkout@v3.3.0
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'
      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: 3.8.2

      # set the FOD app name to be used throughout the workflow
      - name: Set FoD app name
        shell: bash
        run: |
          if [[ -z "$APP_NAME_OVERRIDE" ]]; then
            echo "::debug::Setting FOD_APP_NAME environment variable to default: $DEFAULT_APP_NAME"
            echo "FOD_APP_NAME=$(echo ${DEFAULT_APP_NAME})" >> $GITHUB_ENV
          else
            echo "::debug::Setting FOD_APP_NAME environment variable to override: $APP_NAME_OVERRIDE"
            echo "FOD_APP_NAME=$(echo ${APP_NAME_OVERRIDE})" >> $GITHUB_ENV
          fi
        env:
          DEFAULT_APP_NAME: ${{ env.DEFAULT_APP_NAME }}
          APP_NAME_OVERRIDE: ${{ vars.FOD_APP_NAME }}
        id: set_fod_app_name

      # Get the branch name or pr number
      - name: Extract branch name
        shell: bash
        run: |
          if [[ $GITHUB_REF == *"refs/pull/"* ]]; then
            BRANCH_NAME="$(echo ${GITHUB_REF#refs/pull/})"
            PR_NUMBER="$(echo ${BRANCH_NAME%/merge})"
            BRANCH_NAME="[PR]${SOURCE_BRANCH}#${PR_NUMBER}"
          else
            BRANCH_NAME="$(echo ${GITHUB_REF#refs/heads/})"
          fi
          echo "branch=${BRANCH_NAME}" >> $GITHUB_OUTPUT
        env:
          SOURCE_BRANCH: ${{ github.head_ref }}
        id: extract_branch

      # Install Fortify Command Line (fcli) tool
      - name: Install fcli
        shell: bash
        run: |
          mkdir -p $HOME/fcli/bin
          curl -fsSL https://github.com/fortify-ps/fcli/releases/download/${FCLI_VER}/fcli-linux.tgz | tar -zxvf - -C $HOME/fcli/bin
          echo "$HOME/fcli/bin" >> $GITHUB_PATH

      # Login Fortify on Demand fcli session
      - name: Login fcli
        shell: bash
        run: |
          fcli --version
          fcli fod session login --url $FOD_API_URI --client-id $FOD_CLIENT_ID --client-secret $FOD_CLIENT_SECRET --session github-actions
        env:
          FOD_API_URI: ${{ vars.FOD_API_URI }}
          FOD_CLIENT_ID: ${{ secrets.FOD_CLIENT_ID }}
          FOD_CLIENT_SECRET: ${{ secrets.FOD_CLIENT_SECRET }}

      # Create FoD release for GitHub branch - if it doesn't already exist
      - name: Create FoD release
        shell: bash
        run: |
          fcli fod release list --app "$FOD_APP_NAME" --session github-actions
          echo fcli fod release create "${FOD_APP_NAME}:${FOD_RELEASE_NAME}" --description "Created automatically from GitHub" --copy-from "${FOD_APP_NAME}:${FOD_PARENT_RELEASE_NAME}" --status Development --skip-if-exists -o expr="{releaseId}" --session github-actions
          RELID=$(fcli fod release create "${FOD_APP_NAME}:${FOD_RELEASE_NAME}" --description "Created automatically from GitHub" --copy-from "${FOD_APP_NAME}:${FOD_PARENT_RELEASE_NAME}" --status Development --skip-if-exists -o expr="{releaseId}" --session github-actions)
          echo "::debug::Created FOD_RELEASE_ID=${RELID}"
          echo "FOD_RELEASE_ID=${RELID}" >> $GITHUB_OUTPUT
        id: create_fod_release
        env:
          FOD_APP_NAME: ${{ env.FOD_APP_NAME }}
          FOD_RELEASE_NAME: ${{ steps.extract_branch.outputs.branch }}
          FOD_PARENT_RELEASE_NAME: ${{ vars.FOD_PARENT_RELEASE_NAME }}

      # For Debricked OSS scanning with FoD we need a dependencies file.
      # For instructions on generating the resolved dependency tree file, see https://debricked.com/docs/language-support/java-kotlin.html#gradle.*
      - name: Generate Maven dependencies file
        shell: bash
        run: mvn dependency:tree -DoutputFile=.debricked-maven-dependencies.tgf -DoutputType=tgf

      # Prepare source+dependencies for upload. The default example is for a Maven project that uses pom.xml.
      # Update PACKAGE_OPTS based on the ScanCentral Client documentation for your project's included tech stack(s). Helpful hints:
      #   ScanCentral Client will download dependencies for maven (-bt mvn) and gradle (-bt gradle).
      #   ScanCentral Client can download dependencies for msbuild projects (-bt msbuild); however, you must convert the workflow to use a Windows runner.
      #   ScanCentral has additional options that should be set for PHP and Python projects
      #   For other build tools, add your build commands to download necessary dependencies and prepare according to Fortify on Demand Packaging documentation.
      #   ScanCentral Client documentation is located at https://www.microfocus.com/documentation/fortify-software-security-center/
      - name: Download and run Fortify ScanCentral Client
        uses: fortify/gha-setup-scancentral-client@v2.2.2
        with:
          version: 22.2.0
      - name: Package Code + Dependencies
        run: scancentral package -bt mvn -bf pom.xml -bc "clean package -DfailIfNoTests=false" -oss -o $PACKAGE_FILE
        env:
          PACKAGE_FILE: "package.zip"

      # FOR DEBUG - Save ScanCentral log file
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: scancentral1.log
          path: ~/.fortify/scancentral-22.2.0/log/scancentral.log
          #    retention-days: 5

      # FOR DEBUG - Save package.zip
      #- name: 'Upload Artifact'
      #  uses: actions/upload-artifact@v3
      #  with:
      #    name: package.zip
      #    path: package.zip
      #    retention-days: 5

      # Start Fortify on Demand SAST scan and wait until results complete.
      - name: Perform SAST scan
        shell: bash
        run: |
          fcli fod scan start-sast "${FOD_RELEASE_NAME}" --entitlement SubscriptionOnly --notes "${FOD_SCAN_NOTES}" -f $PACKAGE_FILE --store curScan --session github-actions
          sleep 5
          fcli fod scan wait-for ::curScan:: --session github-actions
        id: perform_sast_scan
        env:
          PACKAGE_FILE: "package.zip"
          FOD_RELEASE_NAME: ${{ format('{0}:{1}', env.FOD_APP_NAME, steps.extract_branch.outputs.branch) }}
          FOD_SCAN_NOTES: "Triggered by GitHub Actions (${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"

      # Start Fortify on Demand SAST scan and wait until results complete. For more information on FoDUploader commands, see https://github.com/fod-dev/fod-uploader-java
      # Update ENV variables for your application and create the necessary GitHub Secrets.  Helpful hints:
      #   Credentials and release ID should be obtained from your FoD tenant (either Personal Access Token or API Key can be used).
      #   Automated Audit preference should be configured for the release's Static Scan Settings in the Fortify on Demand portal.
      #- name: Download Fortify on Demand Universal CI Tool
      #  uses: fortify/gha-setup-fod-uploader@v1
      #- name: Perform SAST Scan
      #  run: java -jar $FOD_UPLOAD_JAR -z $PACKAGE_FILE -aurl $FOD_API_URL -purl $FOD_URL -rid "$FOD_RELEASE_ID" -tc "$FOD_TENANT" -uc "$FOD_USER" "$FOD_PAT" $FOD_UPLOADER_OPTS -n "$FOD_UPLOADER_NOTES"
      #  env:
      #      FOD_TENANT: ${{ secrets.FOD_TENANT }}
      #      FOD_USER: ${{ secrets.FOD_USER }}
      #      FOD_PAT: ${{ secrets.FOD_PAT }}
      #      FOD_RELEASE_ID: ${{ steps.verify_fod_release.outputs.FOD_RELEASE_ID }}
      #      FOD_URL: "https://emea.fortify.com/"
      #      FOD_API_URL: "https://api.emea.fortify.com/"
      #      FOD_UPLOADER_OPTS: "-ep 2 -pp 2 -I 1 -apf"
      #      FOD_UPLOADER_NOTES: 'Triggered by GitHub Actions (${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})'
      #      PACKAGE_FILE: "package.zip"

      # Pull SAST issues from Fortify on Demand and generate GitHub-optimized SARIF output
      - name: Export Results
        uses: fortify/gha-export-vulnerabilities@v1
        with:
          fod_base_url: ${{ vars.FOD_BASE_URL }}
          fod_client_id: ${{ secrets.FOD_CLIENT_ID }}
          fod_client_secret: ${{ secrets.FOD_CLIENT_SECRET }}
          fod_release_name: ${{ format('{0}:{1}', env.FOD_APP_NAME, steps.extract_branch.outputs.branch) }}

      # Check if SARIF output file has been created
      - name: Check file existence
        id: check_files_fod
        uses: andstor/file-existence-action@v2
        with:
          files: "./gh-fortify-sast.sarif"

      # Import Fortify SAST results to GitHub Security Code Scanning
      - name: Import Results
        if: steps.check_files_fod.outputs.files_exists == 'true'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ./gh-fortify-sast.sarif

      # Logout/Close Fortify on Demand fcli session
      - name: Logout fcli
        shell: bash
        run: |
          fcli fod session logout --session github-actions

  FoD-DAST-Scan:
    runs-on: ubuntu-latest
    if: ${{ (github.event.inputs.runFoDDASTScan == 'true') }}

    steps:
      - name: Check Out Source Code
        uses: actions/checkout@v3.3.0
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'

      # Get the branch name or pr number
      - name: Extract branch name
        shell: bash
        run: |
          if [[ $GITHUB_REF == *"refs/pull/"* ]]; then
            BRANCH_NAME="$(echo ${GITHUB_REF#refs/pull/})"
            PR_NUMBER="$(echo ${BRANCH_NAME%/merge})"
            BRANCH_NAME="[PR]${SOURCE_BRANCH}#${PR_NUMBER}"
          else
            BRANCH_NAME="$(echo ${GITHUB_REF#refs/heads/})"
          fi
          echo "branch=${BRANCH_NAME}" >> $GITHUB_OUTPUT
        env:
          SOURCE_BRANCH: ${{ github.head_ref }}
        id: extract_branch

      # Install Fortify Command Line (fcli) tool
      - name: Install fcli
        shell: bash
        run: |
          mkdir -p $HOME/fcli/bin
          curl -fsSL https://github.com/fortify-ps/fcli/releases/download/${FCLI_VER}/fcli-linux.tgz | tar -zxvf - -C $HOME/fcli/bin
          echo "$HOME/fcli/bin" >> $GITHUB_PATH

      # TBD

  Security-Gate:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [ Debricked-SCA,FoD-SAST-Scan,FoD-DAST-Scan ]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Check Out Source Code
        uses: actions/checkout@v3.3.0
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'

      # set the FOD app name to be used throughout the workflow
      - name: Set FoD app name
        shell: bash
        run: |
          if [[ -z "$APP_NAME_OVERRIDE" ]]; then
            echo "::debug::Setting FOD_APP_NAME environment variable to default: $DEFAULT_APP_NAME"
            echo "FOD_APP_NAME=$(echo ${DEFAULT_APP_NAME})" >> $GITHUB_ENV
          else
            echo "::debug::Setting FOD_APP_NAME environment variable to override: $APP_NAME_OVERRIDE"
            echo "FOD_APP_NAME=$(echo ${APP_NAME_OVERRIDE})" >> $GITHUB_ENV
          fi
        env:
          DEFAULT_APP_NAME: ${{ env.DEFAULT_APP_NAME }}
          APP_NAME_OVERRIDE: ${{ vars.FOD_APP_NAME }}
        id: set_fod_app_name

      # Get the branch name or pr number
      - name: Extract branch name
        shell: bash
        run: |
          if [[ $GITHUB_REF == *"refs/pull/"* ]]; then
            BRANCH_NAME="$(echo ${GITHUB_REF#refs/pull/})"
            PR_NUMBER="$(echo ${BRANCH_NAME%/merge})"
            BRANCH_NAME="[PR]${SOURCE_BRANCH}#${PR_NUMBER}"
          else
            BRANCH_NAME="$(echo ${GITHUB_REF#refs/heads/})"
          fi
          echo "branch=${BRANCH_NAME}" >> $GITHUB_OUTPUT
        env:
          SOURCE_BRANCH: ${{ github.head_ref }}
        id: extract_branch

      # Install Fortify Command Line (fcli) tool
      - name: Install fcli
        shell: bash
        run: |
          mkdir -p $HOME/fcli/bin
          curl -fsSL https://github.com/fortify-ps/fcli/releases/download/${FCLI_VER}/fcli-linux.tgz | tar -zxvf - -C $HOME/fcli/bin
          echo "$HOME/fcli/bin" >> $GITHUB_PATH

      # Login Fortify on Demand fcli session
      - name: Login fcli
        shell: bash
        run: |
          fcli --version
          fcli fod session login --url $FOD_API_URI --client-id $FOD_CLIENT_ID --client-secret $FOD_CLIENT_SECRET --session github-actions
        env:
          FOD_API_URI: ${{ vars.FOD_API_URI }}
          FOD_CLIENT_ID: ${{ secrets.FOD_CLIENT_ID }}
          FOD_CLIENT_SECRET: ${{ secrets.FOD_CLIENT_SECRET }}

      # Run script to check the Security Policy of the Fortify on Demand Release to determine success/failure
      - name: Verify Security Policy
        shell: bash
        run: |
          fcli fod release get "${FOD_APP_NAME}:${FOD_RELEASE_NAME}" -o expr="Critical:\t{critical}\nHigh:\t\t{high}\nMedium:\t\t{medium}\nLow:\t\t{low}" --session github-actions
          if [ $(fcli fod release get "${FOD_APP_NAME}:${FOD_RELEASE_NAME}" -o expr="{isPassed}" --session github-actions) = 'true' ]; then echo "Security policy: passed"; else echo "Security policy: failed"; fi
        id: verify_security_policy
        env:
          FOD_APP_NAME: ${{ env.FOD_APP_NAME }}
          FOD_RELEASE_NAME: ${{ steps.extract_branch.outputs.branch }}

      # Logout/Close Fortify on Demand fcli session
      - name: Logout fcli
        shell: bash
        run: |
          fcli fod session logout --session github-actions

  Release-Gate:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [ Quality-Gate, Security-Gate ]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Check Out Source Code
        uses: actions/checkout@v3.3.0

    # TBD
