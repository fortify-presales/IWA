plugins {
    id 'java'
    id 'maven-publish'
    id "org.springframework.boot" version "2.7.17"
}

ext {
    springBootVersion = '2.7.0'
    springOauth2Version = '5.7.1'
    springLog4jVersion = '2.3.12.RELEASE'
    jacksonVersion = '2.13.0'
    itextVersion = '7.2.5'
    springdocOpenApiVersion = '1.8.0'
    junitVersion = '4.12'
    junitJupiterVersion = '5.7.0'
    junitPlatformVersion = '1.7.1'
    seleniumVersion = '4.21.0'
    mockitoVersion = '4.11.0'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-security:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-mail:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-tomcat:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-log4j2:${springLog4jVersion}"
    implementation "org.springframework.boot:spring-boot-devtools:${springBootVersion}"
    implementation "org.thymeleaf.extras:thymeleaf-extras-springsecurity5:3.0.5.RELEASE"
    implementation "nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.2.1"
    implementation "org.apache.commons:commons-email:1.4"
    implementation "org.apache.commons:commons-text:1.8"
    implementation "com.google.guava:guava:30.1.1-jre"
    implementation "com.h2database:h2:1.4.200"
    implementation "com.itextpdf:itext7-core:${itextVersion}"
    implementation "org.passay:passay:1.5.0"
    implementation "org.webjars:bootstrap:4.5.3"
    implementation "org.webjars:jquery:3.5.1"
    implementation "org.webjars:font-awesome:5.15.2"
    implementation "org.webjars:chartjs:2.9.4"
    implementation "org.webjars.npm:axios:0.21.1"
    implementation "org.springdoc:springdoc-openapi-ui:${springdocOpenApiVersion}"
    implementation "org.springdoc:springdoc-openapi-security:${springdocOpenApiVersion}"
    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.module:jackson-module-parameter-names:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
    implementation "com.twilio.sdk:twilio:10.2.0"
    implementation "org.apache.httpcomponents:httpclient:4.5.12"
    implementation "io.jsonwebtoken:jjwt:0.9.1"
    implementation "org.apache.maven.wagon:wagon-http:3.4.1"
    implementation "com.github.cliftonlabs:json-simple:2.3.1"
    implementation "org.apache.tika:tika-core:1.18"
    implementation "org.json:json:20201115" 
    implementation "org.mockito:mockito-bom:${mockitoVersion}"
    implementation "org.hibernate.validator:hibernate-validator:6.1.0.Final"
    implementation "com.warrenstrange:googleauth:1.5.0"
    implementation "com.google.zxing:core:3.4.0"
    implementation "com.google.zxing:javase:3.4.0"
    implementation "org.springframework.security:spring-security-oauth2-resource-server:${springOauth2Version}"
    implementation "org.springframework.security:spring-security-oauth2-jose:${springOauth2Version}"
    testImplementation "org.hibernate.validator:hibernate-validator:6.1.0.Final"
    testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}") {
        exclude group: "com.vaadin.external.google", module:"android-json"
    }
    testImplementation "junit:junit:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter:${junitJupiterVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}"
    testImplementation "org.junit.platform:junit-platform-engine:${junitPlatformVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
    testImplementation "org.seleniumhq.selenium:selenium-java:${seleniumVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${junitJupiterVersion}"
    testRuntimeOnly "org.junit.platform:junit-platform-commons:${junitPlatformVersion}"
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
}
dependencyLocking { lockAllConfigurations() }

apply plugin: 'io.spring.dependency-management'

def props = new Properties()
def propertiesFile = project.file('.env')
if (!propertiesFile.exists()) {
    props.setProperty('APP_NAME', 'iwa')
    props.setProperty('APP_VER_NAME', '1.0')
    Writer writer = new FileWriter(propertiesFile, false)
    props.store(writer, "Change these variables to relevant values. Don't commit this file to source control.")
    writer.close()
}
props.load(propertiesFile.newDataInputStream())

project.archivesBaseName = 'iwa'
group = 'com.microfocus.example'
version = '1.0'
description = 'IWA (Insecure Web App) Pharmacy Direct - an insecure web application for use in Fortify demonstrations'
// A JDK 1.8 is needed if the WebInspect Runtime Agent is being used?
//sourceCompatibility = JavaVersion.VERSION_1_8
//targetCompatibility = JavaVersion.VERSION_1_8
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

sourceSets {
    main {
        java.srcDirs = ['src/main/java','src/iac']
        resources.srcDirs= ['src/main/resources']
    }
    test {
        java.srcDirs = ['src/test/java']
	    resources.srcDirs = ['src/test/resources']	
    } 
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
    filter {
        excludeTestsMatching "*EncryptedPasswordUtilsTest"
    }
    reports {
        junitXml.enabled = true
        html.enabled = true
    }
}
bootJar {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}
bootRun {
    systemProperty "spring.profiles.active", "default,dev"
}

tasks.named('wrapper') {
    distributionType = Wrapper.DistributionType.ALL
}

task writeClasspath() {
    doLast() {
        buildDir.mkdirs()
        def files = configurations.compileClasspath.getFiles().sort()
        new File(buildDir, "classpath.txt").text = files.collect { it.path }.join(';')
        //files.forEach{ f -> print("$f.path;")}
    }
}
